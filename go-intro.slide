Go Intro
An interactive introduction
21 Feb 2018
Tags: golang, workshop

Robert Jacob
Team dust
robert.jacob@holidaycheck.com
https://github.com/xperimental/go-intro
@xperimental

* History

Go is a programming language that originated at Google.

It is just called "Go" but everyone is using "golang" to search for it online to reduce the false-positives.

- Announced November 2009
- Go 1.0 March 2012
- Currently: Go 1.10 (2018-02-16)

* Features

- Static typing
- Type inference
- CSP-style concurrency (Goroutines & Channels)
- Garbage collection
- Easy cross-compilation

* Obligatory Hello World

.play examples/hello.go

* Hello World Explanation

.play examples/hello.go

- `package` defines a namespace ("package")
- `import` makes other packages usable in current one
- `func` defines functions
- `main.main()` is the entrypoint

* Variables

Variables store values of a certain type. The type of a variable can not change during execution ("static typing").

.code examples/vars/vars.go /START OMIT/,/END OMIT/

Compiler tries to infer type if you omit it during declaration:

.play -edit examples/vars/vars-notype.go /START OMIT/,/END OMIT/

* Variables (contd.)

You can define more than one variable in a `var` block:

 var (
     string = "string"
     integer = 5
     float = 3.4
 )

Inside functions there is a short-cut for new variables:

.play examples/vars/vars-short.go /START OMIT/,/END OMIT/

* Variables - Simple variable types

 UTF-8 strings:          string
 UTF-8 character:        rune
 Integers
  Signed:                int, int8, int16, int32, int64
  Unsigned:              uint, uint8, uint16, uint32, uint64
 Floating point numbers: float32, float64
 Complex numbers:        complex64, complex128

* Variables - Pointers

Pointers are variables which contain an address of another variable. Pointers can be used with all types, and are also statically typed:

.play examples/vars/pointers.go /START OMIT/,/END OMIT/

They can be `nil` to point to nothing, but this creates an error when you try to access ("dereference") it:

.play -edit examples/vars/pointers-nil.go /START OMIT/,/END OMIT/

* Variables - Structures

Complex variables can be created using `struct` types:

.play examples/vars/vars-structs.go /START OMIT/,/END OMIT/

* Variables - Composition

`struct` can be combined:

.play examples/vars/vars-composition.go /START OMIT/,/END OMIT/

* Constants

- Typed like variables
- Only simple types
- Can not change value (compile error)
- Only outside of functions

.play examples/vars/constants.go /START OMIT/,/END OMIT/

* Flow Control - If

`if` can be used to check for conditions:

.play -edit examples/flow/flow-if.go /START OMIT/,/END OMIT/

* Flow Control - Switch

`switch` can be used to combine multiple `if`-`else` blocks:

.play examples/flow/flow-switch-basic.go /START OMIT/,/END OMIT/

* Flow Control - Switch Without Variable

If used without variable, the case statements need to be booleans:

.play examples/flow/flow-switch-bare.go /START OMIT/,/END OMIT/

* Flow Control - Loops

- Classic `for`:

.play examples/flow/flow-for-classic.go /START OMIT/,/END OMIT/

- Range (with array):

.play examples/flow/flow-for-range.go /START OMIT/,/END OMIT/

- Endless:

.play examples/flow/flow-for-endless.go /START OMIT/,/END OMIT/

* Flow Control - Scoped Variables

You can create new variables inside blocks (if, switch, for), which are only available in the block:

.play -edit examples/flow/flow-if-variable.go /START OMIT/,/END OMIT/

* Functions

Define using `func`, call using name:

.play examples/functions/functions.go /START OMIT/,/END OMIT/

You can pass parameters to functions:

.play examples/functions/functions-params.go /START OMIT/,/END OMIT/

* Function - Return values

Functions can return one or more results:

.play examples/functions/functions-return.go /START OMIT/,/END OMIT/

* Functions - Multiple Return values

Functions can return one or more results:

.play -edit examples/functions/functions-return-multi.go /START OMIT/,/END OMIT/

* Functions - Receivers

Go is not object-oriented. But you can attach functions to types to create "methods":

.play examples/functions/functions-receiver.go  /START OMIT/,/END OMIT/

* Interfaces

 type Reader interface {
     Read() ([]byte, error)
 }

- Interfaces define types that have certain methods.
- If a type defines the correct methods, it automatically satisfies the interface (no `implements` like in Java).

* Packages

Packages can be used to break up programs into components that can be reused and shared:

- One directory = one package
- Directory name = package name (`main` is special).

Items (variables, constants, functions) can be public or private:

- Use `import` to use public items of other packages.
- Leading character decides if private or public:

.code examples/public-private.go /START OMIT/,/END OMIT/

* Package Names

- Runtime packages (examples):

 fmt
 net/http

- External packages (full path):

 golang.org/x/crypto/ssh
 github.com/gorilla/mux

Download external packages using "go get":

 go get -d golang.org/x/crypto/ssh (just download)
 go get golang.org/x/crypto/ssh (download, compile, install binaries)

But where are they downloaded to?

* $GOPATH

- Local directory (default = `$HOME/go`)
- Single repository for "all Go code"
- Three subdirectories (`src`, `pkg` and `bin`)

 /home/rjacob/
 │
 └── go
     │
     ├── src (sources)
     │
     ├── pkg (package object files)
     │
     └── bin (built executables)

* $GOPATH (continued)

.code gopath.txt

* Goroutines

Go can run functions asynchronous:

.play examples/goroutines/goroutines.go /START OMIT/,/END OMIT/

* Channels

- Messaging between Goroutines
- Typed
- Blocking by default

.play examples/goroutines/channels.go /START OMIT/,/END OMIT/

* Channels - Buffering

You can define a buffer when making a channel:

.play -edit examples/goroutines/channels-buffered.go /START OMIT/,/END OMIT/

* Cross Compilation

- Completely self-contained (compiler is also Go)
- Different OSs: `linux`, `darwin`, `windows`
- Different Architectures: `amd64`, `386`, `arm`, `arm64`, `mips`, ...
- Set target using environment variables:

 GOOS=darwin GOARCH=amd64 go install <package>

* A "real" example

Let's build a small web project together...
