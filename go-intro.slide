Go Intro
An interactive introduction
26 Aug 2017
Tags: golang, workshop

Robert Jacob
hacKNology e.V.
mail@robertjacob.de
https://sourcewalker.net
https://github.com/xperimental
@xperimental

* History

Go ("golang") is a programming language that originated at Google.

- Announced November 2009
- Go 1.0 March 2012
- Currently: Go 1.9 (24 August 2017)

* Features

- Static typing
- Type inference
- CSP-style concurrency
- Garbage collection
- Easy cross-compilation

* Obligatory Hello World

.play hello.go

* Hello World Explanation

.play hello.go

- `package` defines a namespace ("package")
- `import` makes other packages usable in current one
- `func` defines functions

* Variables

Variables store values of a certain type. The type of a variable can not change during execution ("static typing").

.code vars.go /START OMIT/,/END OMIT/

* Variables - Type inference

Compiler tries to infer type if you omit it during declaration:

.play -edit vars-notype.go /START OMIT/,/END OMIT/

* Variables - Simple variable types

 UTF-8 strings:          string
 UTF-8 character:        rune
 Integers
  Signed:                int, int8, int16, int32, int64
  Unsigned:              uint, uint8, uint16, uint32, uint64
 Floating point numbers: float32, float64
 Complex numbers:        complex64, complex128

* Variables - Pointers

All types can also be used as a pointer type:

.play pointers.go /START OMIT/,/END OMIT/

Pointers are variables which contain an address of another variable.
They can be `nil` to point to nothing, which creates an error when you try to access it:

.play pointers-nil.go /START OMIT/,/END OMIT/

* Variables - Multi declaration

You can define more than one variable in a `var` block:

 var (
     string = "string"
     integer = 5
     float = 3.4
 )

* Variables - Short declaration

Inside functions there is a short-cut for new variables:

.play vars-short.go /START OMIT/,/END OMIT/

* Variables - Structures

Complex variables can be created using `struct` types:

.play vars-structs.go /START OMIT/,/END OMIT/

* Variables - Composition

`struct` can be combined:

.play vars-composition.go /START OMIT/,/END OMIT/

* Constants

- Typed like variables
- Only simple types
- Can not change value (compile error)
- Only outside of functions

.play constants.go /START OMIT/,/END OMIT/

* Flow Control - If

`if` can be used to check for conditions:

.play -edit flow-if.go /START OMIT/,/END OMIT/

* Flow Control - If Variables

You can create new variables inside if, which are only available in the block:

.play -edit flow-if-variable.go /START OMIT/,/END OMIT/

* Flow Control - Loops

- Classic `for`:

.play flow-for-classic.go /START OMIT/,/END OMIT/

- Range (with array):

.play flow-for-range.go /START OMIT/,/END OMIT/

- Endless:

.play flow-for-endless.go /START OMIT/,/END OMIT/

*  

.background imgs/break.jpg

* Functions

Define using `func`, call using name:

.play functions.go /START OMIT/,/END OMIT/

* Functions - Parameters

Pass parameters to functions:

.play functions-params.go /START OMIT/,/END OMIT/

* Function - Return values

Functions can return one or more results:

.play functions-return.go /START OMIT/,/END OMIT/

* Functions - Multiple Return values

Functions can return one or more results:

.play -edit functions-return-multi.go /START OMIT/,/END OMIT/

* Functions - Receivers

Go is not object-oriented. But you can attach functions to types to create "methods":

.play functions-receiver.go  /START OMIT/,/END OMIT/

* Packages

- Break programs into functional components.
- One package = one directory.
- Name is directory name (`main` is special).
- Items (variables, constants, functions) can be public or private.
- Use `import` to use public items of other packages.

* Package Names

- Runtime packages (examples):

 fmt
 net/http

- External packages (full path):

 golang.org/x/crypto/ssh
 github.com/gorilla/mux

Download external packages using "go get":

 go get -d golang.org/x/crypto/ssh (just download)
 go get golang.org/x/crypto/ssh (download, compile, install binaries)

But where are they downloaded to?

* $GOPATH

- Directory on your computer (default = `$HOME/go`)
- Single repository for "all Go code"
- Three subdirectories (`src`, `pkg` and `bin`)

 /home/xperimental/
 |
 +-+ go
   |
   +- src (sources)
   |
   +- pkg (package object files)
   |
   +- bin (built executables)

* $GOPATH (continued)

.code gopath.txt

* Public vs. private

- Leading character decides

.code public-private.go /START OMIT/,/END OMIT/

*  

.background imgs/break.jpg

* Goroutines

Go can run functions asynchronous:

.play goroutines.go /START OMIT/,/END OMIT/

* Channels

- Messaging between Goroutines
- Typed
- Blocking by default

.play channels.go /START OMIT/,/END OMIT/

* Channels - Buffering

You can define a buffer when making a channel:

.play -edit channels-buffered.go /START OMIT/,/END OMIT/

* Cross Compilation

- Completely self-contained (compiler is also Go)
- Different OSs: `linux`, `darwin`, `windows`
- Different Architectures: `amd64`, `386`, `arm`, `arm64`, `mips`, ...
- Set target using environment variables:

 GOOS=darwin GOARCH=amd64 go install <package>
